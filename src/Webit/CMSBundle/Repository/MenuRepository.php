<?php

namespace Webit\CMSBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MenuRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MenuRepository extends EntityRepository {

    public function getItemsByMenuId($lang = 'en') {
        $q_builder = $this->createQueryBuilder('m')
                ->select('items.id as item_id,items.route, items.link, items.isTargetBlank, items.contentId, '
                        . 'items.parentMenuItemId parenItem, t.displayLabel label, '
                        . 'c.id as content_id, c.slug as content_slug,t.description,t.lang')
                ->innerJoin('m.menu_items', 'items')
                ->where('m.name = :homepage')
                ->andWhere('items.isActive = :active')
                ->innerJoin('items.Translations', 't')
                ->andWhere('t.lang = :lang')
                ->orWhere('t.lang = :defaultLang')
                ->leftJoin('items.content', 'c')
                ->addOrderBy('items.weight', 'asc')
                ->setParameter(':lang', $lang)
                ->setParameter(':defaultLang','en')
                ->setParameter(':active', true)
                ->setParameter(':homepage', 'homepage')
                ->addOrderBy('items.weight', 'asc');
        $query = $q_builder->getQuery();
        $objs = $query->getArrayResult();

        $finalResults = array();

        foreach ($objs as $key => $value) {
          // $label = [];
            if (is_null($value['parenItem'])) {
                // level 1
                $label[$value['item_id']][$value['lang']] = $value['label'];
                $description[$value['item_id']][$value['lang']] = $value['description'];
                $finalResults[$value['item_id']] = array(
                    'link' => $value['link'], 'route' => $value['route'], 'contentId' => $value['contentId'], 'content_slug' => $value['content_slug'],
                    'label' => $label[$value['item_id']], 'description' => $description[$value['item_id']]
                );
            } elseif (!is_null($value['parenItem'])) {

                if (isset($finalResults[$value['parenItem']])) {
                    //level 2
                    $label2[$value['parenItem']][$value['lang']] = $value['label'];
                    
                    $finalResults[$value['parenItem']]['level2'][$value['item_id']] = 
                ['id' => $value['item_id'], 'label' => $label2[$value['parenItem']],'link' => $value['link'], 'route' => $value['route'], 'contentId' => $value['contentId'], 'content_slug' => $value['content_slug']];

                    //level 3


                    foreach ($objs as $value2) {
                        if ($value2['parenItem'] == $value['item_id']) {
                            $label3[$value['parenItem']][$value2['lang']] = $value2['label'];
                            $finalResults[$value['parenItem']]['level2'][$value['item_id']]['level3'][$value2['item_id']] = ['label' => $label3[$value['parenItem']], 'link' => $value2['link'], 'route' => $value2['route'], 'contentId' => $value2['contentId'], 'content_slug' => $value2['content_slug']];
                        }
                    }
                }
            }
            unset($value);
        }
        unset($objs);


        return $finalResults;
    }

}
