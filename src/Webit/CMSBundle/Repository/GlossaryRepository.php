<?php

namespace Webit\CMSBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * GlossaryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GlossaryRepository extends EntityRepository
{
    public function getGlossary($lang)
    {
        $q = $this->createQueryBuilder('g')
                ->where('g.language=:lang')
                ->setParameter('lang', $lang)
                ->orderBy('g.word', 'ASC')
                ->getQuery();

        $r = $q->getArrayResult();


        $glossary = array();
        foreach ($r as $words) {
            $word_list = str_split(trim($words['word']));

            if (in_array(mb_substr($words['word'], 0, 1, 'utf8'), array('أ', 'إ', 'ا')))
                $key = 'ا';
            else
                $key = strtoupper(mb_substr($words['word'], 0, 1, 'utf8'));
            $glossary[$key][] = $words;
        }

        return $glossary;
    }

    public function getletters($lang)
    {
        $q = $this->createQueryBuilder('g')
                ->where('g.language=:lang')
                ->setParameter('lang', $lang)
                ->orderBy('g.word', 'ASC')
                ->getQuery();

        $r = $q->getArrayResult();


        $letters = array();
        foreach ($r as $words) {

            if (in_array(mb_substr($words['word'], 0, 1, 'utf8'), array('أ', 'إ', 'ا')))
                $key = 'ا';
            else
                $key = strtoupper(mb_substr($words['word'], 0, 1, 'utf8'));
            $letters[$key] = strtoupper(mb_substr($words['word'], 0, 1, 'utf8'));
        }

        return $letters;
    }

    public function getGlossaryByKeyword($keyword, $lang)
    {
        $qb = $this->createQueryBuilder('g')
                ->andWhere('g.language = :lang')
                ->setParameter(':lang', $lang)
                ->orderBy('g.word', 'ASC')

        ;

        if ($keyword) {
            $keyword_arr = explode(' ', $keyword);
            foreach ($keyword_arr as $key_data) {
                if (!empty($key_data)) {
                    $cqb[] = $qb->expr()->like("g.word", "'%$key_data%'");
                }
            }
            $qb->andWhere(call_user_func_array(array($qb->expr(), "orx"), $cqb));
        }
        return $qb->getQuery()->getResult();
    }

}
