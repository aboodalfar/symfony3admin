<?php

namespace Webit\MailtemplateBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MailTemplateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * @version 1.2
 */
class MailTemplateRepository extends EntityRepository
{
    /**
     * configure the mail message to be sent
     * @param string $email_name
     * @param array $replace_params
     * @return \Swift_Message
     * @deprecated since version 1.2
     */
    public function configEmailVars($email_name, $replace_params = array(), $to = null, $lang = 'en')
    {
        $email_template = $this->findOneBy(array('name' => $email_name));

        $subject = strtr($email_template->getSubjectTrans($lang), $replace_params);
        $mail_body = strtr($email_template->getMailBodyTrans($lang), $replace_params);

        $email_dir = __DIR__ . '/../Resources/views/Email/template.html.twig';
        $mail_txt = file_get_contents($email_dir);
        $mail_message = str_replace(array("%message_title%", "%body_message%"), array($subject, $mail_body), $mail_txt);

        $yaml = new \Symfony\Component\Yaml\Parser();
        $config = $yaml->parse(file_get_contents(__DIR__ . '/../Resources/config/config.yml'));

        if (is_null($to)) {
            $to = $config['mail_variables']['default_reciever'];
        }

        $message = \Swift_Message::newInstance()
                ->setFrom(array($config['mail_variables']['sender_email'] => $config['mail_variables']['sender_name']))
                ->setTo($to)
                ->setSubject($subject)
                ->setBody($mail_message)
                ->setContentType("text/html")
        ;

        if (isset($config['mail_variables']['BCC'])) {//auto BBC
            $message->addBcc($config['mail_variables']['BCC']);
        }

        $reply_to = $config['mail_variables']['reply_to_email'];
        if ($email_template->getReplyTo()) {
            $reply_to = $email_template->getReplyTo();
        }
        $message->setReplyTo($reply_to);

        return $message;
    }


    /**
     *
     * @param string $email_name
     * @param string $lang
     * @return MailTemplateTranslation
     */
    public function getTransByKey($email_name, $lang = 'en')
    {
        $email_template = $this->findOneBy(array('name' => $email_name));
        if(!$email_template){ //email template not found
            return null; 
        }
        $trans = $email_template->getMailTranslation($lang);

        if(!$trans){
            $trans = $email_template->getMailTranslation('en');
        }

        return $trans;
    }
}
