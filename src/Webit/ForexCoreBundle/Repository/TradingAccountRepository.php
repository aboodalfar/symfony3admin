<?php

namespace Webit\ForexCoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Webit\ForexCoreBundle\Entity\TradingAccount;
use Webit\ForexCoreBundle\Entity\PortalUser;
use Webit\ForexCoreBundle\Entity\CodeTradingGroup;

/**
 * TradingAccountRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TradingAccountRepository extends EntityRepository
{
    /**
     * save newly created trading account to the database
     * @param PortalUser  $user
     * @param null|CodeTradingGroup group
     * @param array $data
     * @return TradingAccount $trading_acc
     */
    public function createNewAccount(PortalUser $user, $group, array $data)
    {
            $trading_acc = new TradingAccount();
            $type = (isset($data['type'])===true)?$data['type']:'mt4';

            $trading_acc->setLogin($data['login']);
            $trading_acc->setPortalUser($user);
            $trading_acc->setCodeTradingGroup($group);
            $trading_acc->setOnlinePassword($data['password_investor']);
            $trading_acc->setRoPassword($data['password']);
            $trading_acc->setAccountType($data['account_type']);            
            $trading_acc->setLeverage(isset($data['leverage'])?$data['leverage']:'100');
            $trading_acc->setComment(isset($data['comment'])?$data['comment']:'create automatic account');
            $trading_acc->setAgentAccount(isset($data['agent'])?$data['agent']:0);

            if($data['account_type'] == TradingAccount::demo_account){
                $trading_acc->setIsDemo(true);
            }else{
                $trading_acc->setIsDemo(false);
            }
            if(isset($data['Platform'])){
                $trading_acc->setPlatform($data['Platform']);
            }            
            $currency_symbol = isset($data['currency'])?$data['currency']:"USD";
            $trading_currency = $this->_em
                                     ->getRepository('\Webit\ForexCoreBundle\Entity\TradingCurrency')
                                     ->findOneBy(array('isoCode'=>$currency_symbol));
            $trading_acc->setTradingCurrency($trading_currency);

            $this->getEntityManager()->persist($trading_acc);
            $this->getEntityManager()->flush();

            return $trading_acc;
    }

    /**
     * getting greatest login number in the range of MT4 login(s)
     * used in automatic creation of real trading accounts
     * @param int $range_low lowest number in the range
     * @return int
     */
    public function getMaxLoginByRange($range_low){
        $q = $this->createQueryBuilder('t')
                ->select('t.login')
                ->where('t.isDemo = false')
                ->andWhere('t.login >= :login_range_low')
                ->andWhere('t.login < :login_range_high')
                ->setParameter(':login_range_low', $range_low)
                ->setParameter(':login_range_high', $range_low+50000)
                ->addOrderBy('t.login', 'desc')
                ->setMaxResults(1)
                ->getQuery()
                ;
        $res = $q->getArrayResult();

        if(count($res)){
            return $res[0]['login'];
        }else{
            return $range_low;
        }        
    }
}
