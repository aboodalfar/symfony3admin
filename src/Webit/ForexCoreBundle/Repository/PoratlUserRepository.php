<?php

namespace Webit\ForexCoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Webit\ForexCoreBundle\Entity\PortalUser;
use Webit\ForexCoreBundle\Entity\DemoProfile;
use Webit\ForexCoreBundle\Entity\RealProfile;

/**
 * PoratlUsersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PoratlUserRepository extends EntityRepository
{
    /**
     * getting user record by username/password combination
     * @param string $username
     * @param string $password
     * @param boolean $active
     * @return PortalUser|Null
     */
    public function getByCredentials($username, $password, $active=null)
    {
        $qb = $this->createQueryBuilder('p')
                ->where('p.username = :username')
                ->setParameter(':username', $username);

        if(!is_null($active)){
            $qb->andWhere('p.active = :active')
               ->setParameter(':active', $active);
        }

        $object = $qb->getQuery()->getOneOrNullResult();
        if(is_null($object)===false && password_verify($password, $object->getPassword())===false){
            return null; //invalid credentials
        }

        return $object;
    }

    /**
     * creating portal user by basic information
     * @param string $username
     * @param string $password
     * @param string $type
     * @param boolean $active
     * @return PortalUser
     */
    public function createByBasicInfo($username,$password,$type,$active){
        $accountType = PortalUser::$account_types[ucfirst($type)];
        $portalUser = new PortalUser();

        $portalUser->setUsername($username);
        $portalUser->setPassword($password);
        $portalUser->setAccountType($accountType);
        $portalUser->setCommunicationLanguage('en');
        $portalUser->setFirstName('-');
        $portalUser->setLastName('-');
        $portalUser->setActive($active);

        $em = $this->getEntityManager();
        $em->persist($portalUser);

        if($accountType==PortalUser::DemoAccount){
            $demoProfile = new DemoProfile();            
            $portalUser->setDemoProfile($demoProfile);
            $demoProfile->setDemoAccountType(DemoProfile::STANDARD_TYPE);
            $demoProfile->setDemoDeposite(500);
            $demoProfile->setSwapRolloverAccount(0);
            $demoProfile->setPortalUser($portalUser);

            $em->persist($demoProfile);
        }else{
            $realProfile = new RealProfile();
            $realProfile->setBoPorStatus(RealProfile::RECENT);
            //TODO: complete other fields later
            $realProfile->setPortalUser($portalUser);
            $realProfile->setPrimaryContactNumber('0000000');
            $realProfile->setCityTown("-");
            $realProfile->setBuildingNameNumber("-");
            $realProfile->setAccountTradedByAnother(false);
            $realProfile->setUseScalpingStrategies(false);
            $realProfile->setUseExpertAdvisor(false);
            $realProfile->setInPendingBankruptcy(false);
            $realProfile->setRiskCapital(0);
            $realProfile->setHaveLeverageExperience(0);
            $realProfile->setExperienceStockSecurities(0);
            $realProfile->setExperienceOptions(0);
            $em->persist($realProfile);
        }


        $em->flush();

        return $portalUser;
    }

}
